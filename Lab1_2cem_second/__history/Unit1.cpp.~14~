//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
#include<math.h>
#include "Figure.h"
figure* fig;
rectangle rec;
cirk kr;
TForm1 *Form1;
int X1=0;
int Y1=0;
int X2=0;
int Y2=0;
int activationNumber;
int operation=-1;
double radius;
double square;
double perimetr;
int x;
int y;
int change=0;

//---------------------------------------------------------------------------
__fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Image1MouseDown(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{

	 X1=X;
	 Y1=Y;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::FormCreate(TObject *Sender)
{
Image1->Canvas->Pen->Color=clRed;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::Image1MouseUp(TObject *Sender, TMouseButton Button, TShiftState Shift,
		  int X, int Y)
{
X2=X;
Y2=Y;

switch(RadioGroup3->ItemIndex)
{

case 0:
  rec.get(X1,Y1,X2,Y2);
  rec.show(Canvas,Image1);
break;

case 1:
kr.get(X1,Y1,X2,Y2);
kr.calculateRadius();
kr.show(Canvas,Image1);
}

 /*
switch(activationNumber)
{

case 0:

  if(operation!=3)
  {
  rec.get(X1,Y1,X2,Y2);
  rec.show(Canvas,Image1);
  rec.showCenterMass();
  }
  else
  {
   rec.moveCenterMass(X1,Y1);
   rec.show(Canvas,Image1);
  }

 switch (operation) {

 case 0:

  square=rec.showSquare();
  Panel1->Caption="regtangle square = "+FloatToStr(square);

 break;

 case -1:

	Panel1->Caption="";

 break;

 case 1:
	 perimetr=rec.showPerimetr();
	 Panel1->Caption="regtangle perimetr = "+FloatToStr(perimetr);
 break;

 case 2:
	 Panel1->Caption="centers rectangle X = "+FloatToStr((X1+X2)/2)+" Y = "+FloatToStr((Y1+Y2)/2);

 break;
 }


 break;

case 1:

 if (operation!=3)
 {
 kr.get(X1,Y1,X2,Y2);
 kr.calculateRadius();
 kr.show(Canvas,Image1);
 }
 else
 {
   kr.moveCenterMass(X1,Y1);
   kr.show(Canvas,Image1);
 }




 switch (operation)
 {
   case 0:
   //fig=&rec;
   square=kr.showSquare();
   Panel1->Caption=FloatToStr(square);
   Panel1->Caption="Circus square = "+FloatToStr(square);
   break;

  case -1:
  Panel1->Caption="";
  break;

	 case(1):
	 perimetr=kr.showPerimetr();
	 Panel1->Caption="circus perimetr = "+FloatToStr(perimetr);
	 break;

	 case 2:
	 //rec.showCenterMass();
	 Panel1->Caption="centers circus X = "+FloatToStr(X1)+" Y = "+FloatToStr(Y1);
	 break;
 }

break;

}
*/

}
//---------------------------------------------------------------------------
void __fastcall TForm1::RadioButton1Click(TObject *Sender)
{
activationNumber=0;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::RadioButton2Click(TObject *Sender)
{
activationNumber=1;
}
//---------------------------------------------------------------------------
void __fastcall TForm1::RadioButton3Click(TObject *Sender)
{
operation=0;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RadioButton4Click(TObject *Sender)
{
operation=-1;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RadioButton5Click(TObject *Sender)
{
operation=1;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::RadioButton6Click(TObject *Sender)
{
operation=2;
}
//---------------------------------------------------------------------------


void __fastcall TForm1::RadioButton7Click(TObject *Sender)
{
   operation=3;
}
//---------------------------------------------------------------------------

void __fastcall TForm1::Image1Click(TObject *Sender)
{
   Image1->Canvas->FillRect(Image1->Canvas->ClipRect);
}
//---------------------------------------------------------------------------


